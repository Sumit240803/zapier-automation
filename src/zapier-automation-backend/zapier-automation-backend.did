service : {
  create_workflow : (record {
    name : text;
    trigger : variant {
      ContractEvent : record {
        contract_address : text;
        event_name : text;
        poll_interval_sec : nat64;
      };
      HttpRequest : record {
        url : text;
        method : text;
      };
      TimeBased : record {
        cron : text;
      };
    };
    actions : vec variant {
      SendHttpRequest : record { url : text; method : text; body : text; };
      NotifyUser : record { user_id : text; message : text; };
      ExecuteContractMethod : record {
        contract_address : text;
        method : text;
        args : vec text;
      };
    };
    conditions : opt vec record {
      field : text;
      operator : text;
      value : text;
    };
  }) -> (text);
  
  list_workflows : () -> (vec record {
    id : text;
    name : text;
    trigger : variant {
      ContractEvent : record {
        contract_address : text;
        event_name : text;
        poll_interval_sec : nat64;
      };
      HttpRequest : record {
        url : text;
        method : text;
      };
      TimeBased : record {
        cron : text;
      };
    };
    actions : vec variant {
      SendHttpRequest : record { url : text; method : text; body : text; };
      NotifyUser : record { user_id : text; message : text; };
      ExecuteContractMethod : record {
        contract_address : text;
        method : text;
        args : vec text;
      };
    };
    conditions : opt vec record {
      field : text;
      operator : text;
      value : text;
    };
    status : variant { Active; Paused; Disabled };
    owner : text;
    created_at : nat64;
    updated_at : nat64;
  });

  get_workflow : (text) -> (opt record {
  id : text;
  name : text;
  trigger : variant {
    ContractEvent : record {
      contract_address : text;
      event_name : text;
      poll_interval_sec : nat64;
    };
    HttpRequest : record {
      url : text;
      method : text;
    };
    TimeBased : record {
      cron : text;
    };
  };
  actions : vec variant {
    SendHttpRequest : record { url : text; method : text; body : text; };
    NotifyUser : record { user_id : text; message : text; };
    ExecuteContractMethod : record {
      contract_address : text;
      method : text;
      args : vec text;
    };
  };
  conditions : opt vec record {
    field : text;
    operator : text;
    value : text;
  };
  status : variant { Active; Paused; Disabled };
  owner : text;
  created_at : nat64;
  updated_at : nat64;
});


  update_workflow_status : (text, variant { Active; Paused; Disabled }) -> (variant { ok : null; err : text });

  delete_workflow : (text) -> (variant { ok : null; err : text });
}
